package toys

private const val FILENAMES = """
  DiscreteDomain.java
  NullsLastOrdering.java
  ImmutableSortedMap.java
  FilteredMultimapValues.java
  Multiset.java
  ClassToInstanceMap.java
  TableCollectors.java
  IndexedImmutableSet.java
  LinkedHashMultimapGwtSerializationDependencies.java
  AbstractMapBasedMultiset.java
  Cut.java
  ForwardingConcurrentMap.java
  AbstractBiMap.java
  TopKSelector.java
  AbstractSetMultimap.java
  Sets.java
  Serialization.java
  HashMultimapGwtSerializationDependencies.java
  ForwardingImmutableList.java
  AbstractRangeSet.java
  RegularImmutableAsList.java
  SortedMultisets.java
  HashBasedTable.java
  EmptyImmutableSetMultimap.java
  ImmutableSortedSetFauxverideShim.java
  Iterables.java
  Iterators.java
  NullsFirstOrdering.java
  JdkBackedImmutableMultiset.java
  ImmutableSetMultimap.java
  ForwardingImmutableCollection.java
  RegularContiguousSet.java
  ImmutableEnumSet.java
  ForwardingMultiset.java
  TreeMultimap.java
  ForwardingSortedSetMultimap.java
  Synchronized.java
  UnmodifiableIterator.java
  RegularImmutableSet.java
  HashMultiset.java
  Hashing.java
  LinkedHashMultimap.java
  ImmutableMapValues.java
  ForwardingMap.java
  MultimapBuilder.java
  ImmutableMultiset.java
  ImmutableEntry.java
  ImmutableSet.java
  Maps.java
  ForwardingSetMultimap.java
  EmptyImmutableListMultimap.java
  DescendingImmutableSortedMultiset.java
  CompactLinkedHashSet.java
  ForwardingObject.java
  ImmutableBiMap.java
  ComputationException.java
  ForwardingDeque.java
  ForwardingSortedMultiset.java
  ImmutableMapKeySet.java
  ArrayListMultimap.java
  ImmutableBiMapFauxverideShim.java
  ForwardingNavigableMap.java
  ForwardingImmutableSet.java
  SortedSetMultimap.java
  SortedMapDifference.java
  BaseImmutableMultimap.java
  ContiguousSet.java
  RangeSet.java
  Collections2.java
  UsingToStringOrdering.java
  ImmutableSortedMultisetFauxverideShim.java
  ForwardingSortedSet.java
  CompactHashMap.java
  RegularImmutableBiMap.java
  FilteredSetMultimap.java
  RangeGwtSerializationDependencies.java
  SortedMultiset.java
  JdkBackedImmutableBiMap.java
  ExplicitOrdering.java
  AbstractSortedKeySortedSetMultimap.java
  Queues.java
  AbstractMultiset.java
  ArrayListMultimapGwtSerializationDependencies.java
  SingletonImmutableSet.java
  FilteredKeySetMultimap.java
  ReverseNaturalOrdering.java
  FilteredEntryMultimap.java
  FilteredKeyListMultimap.java
  Table.java
  JdkBackedImmutableSet.java
  CompactHashing.java
  Interners.java
  EnumBiMap.java
  AbstractNavigableMap.java
  NaturalOrdering.java
  RegularImmutableMultiset.java
  ObjectArrays.java
  GwtTransient.java
  TreeRangeMap.java
  MoreCollectors.java
  Count.java
  PeekingIterator.java
  FilteredEntrySetMultimap.java
  ForwardingCollection.java
  AbstractSequentialIterator.java
  ArrayTable.java
  SortedIterable.java
  ImmutableRangeSet.java
  TransformedListIterator.java
  LinkedListMultimap.java
  Lists.java
  TreeBasedTable.java
  Interner.java
  CollectCollectors.java
  ComparatorOrdering.java
  EvictingQueue.java
  CollectSpliterators.java
  AllEqualOrdering.java
  MapMakerInternalMap.java
  SingletonImmutableTable.java
  AbstractIndexedListIterator.java
  HashBiMap.java
  ImmutableMapEntry.java
  Multisets.java
  ImmutableTable.java
  SortedMultisetBridge.java
  ForwardingMapEntry.java
  BoundType.java
  ImmutableMapEntrySet.java
  ForwardingListMultimap.java
  Tables.java
  ByFunctionOrdering.java
  SortedIterables.java
  Platform.java
  FilteredKeyMultimap.java
  TreeRangeSet.java
  CartesianList.java
  DescendingImmutableSortedSet.java
  ImmutableRangeMap.java
  RegularImmutableSortedSet.java
  ListMultimap.java
  RegularImmutableSortedMultiset.java
  ForwardingBlockingDeque.java
  EnumHashBiMap.java
  EmptyContiguousSet.java
  AbstractMultimap.java
  TreeTraverser.java
  Multimaps.java
  MinMaxPriorityQueue.java
  DenseImmutableTable.java
  JdkBackedImmutableMap.java
  ImmutableSortedMapFauxverideShim.java
  ForwardingIterator.java
  SetMultimap.java
  RangeMap.java
  Range.java
  FilteredMultimap.java
  ImmutableAsList.java
  CompoundOrdering.java
  ForwardingSortedMap.java
  ImmutableClassToInstanceMap.java
  FluentIterable.java
  CompactHashSet.java
  LexicographicalOrdering.java
  AbstractTable.java
  TransformedIterator.java
  SortedLists.java
  RegularImmutableList.java
  CompactLinkedHashMap.java
  ImmutableMultisetGwtSerializationDependencies.java
  AbstractIterator.java
  CollectPreconditions.java
  SingletonImmutableBiMap.java
  RowSortedTable.java
  ForwardingImmutableMap.java
  Comparators.java
  ForwardingNavigableSet.java
  ComparisonChain.java
  UnmodifiableListIterator.java
  AbstractListMultimap.java
  Ordering.java
  ReverseOrdering.java
  ConsumingQueueIterator.java
  AbstractSortedSetMultimap.java
  EnumMultiset.java
  ForwardingTable.java
  ImmutableEnumMap.java
  Streams.java
  ForwardingMultimap.java
  SparseImmutableTable.java
  TreeMultiset.java
  ForwardingSet.java
  ImmutableList.java
  HashMultimap.java
  RegularImmutableMap.java
  LinkedHashMultiset.java
  DescendingMultiset.java
  ConcurrentHashMultiset.java
  ImmutableMap.java
  ImmutableCollection.java
  ImmutableListMultimap.java
  ImmutableMultimap.java
  MutableClassToInstanceMap.java
  UnmodifiableSortedMultiset.java
  StandardRowSortedTable.java
  ForwardingListIterator.java
  ImmutableSortedAsList.java
  BiMap.java
  ForwardingList.java
  ForwardingQueue.java
  ImmutableSortedMultiset.java
  package-info.java
  RegularImmutableTable.java
  Multimap.java
  MapDifference.java
  GeneralRange.java
  AbstractSortedMultiset.java
  ImmutableSortedSet.java
  SingletonImmutableList.java
  StandardTable.java
  MapMaker.java
  AbstractMapBasedMultimap.java
  AbstractMapEntry.java
"""

fun main() {
  val groupedFiles = FILENAMES
    .split("\n")
    .map { it.trim() }
    .filter { it.isNotBlank() }
    .groupBy { tokenize(it).last() }

  val groups = groupedFiles
    .entries
    .sortedBy { it.value.size }
    .reversed()

  groups
    .onEach { group ->
      group.value.sorted().onEach { filename -> println(filename) }
      println()
    }

  println("Found ${groups.size} groups.")
}

private fun tokenize(filename: String): List<String> =
  filename.split(Regex("(?=\\p{Upper})")).filter { it.isNotBlank() }

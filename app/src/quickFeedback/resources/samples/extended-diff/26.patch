diff --git a/app/src/main/kotlin/io/redgreen/timelapse/extendeddiff/ExtendedDiffHtml.kt b/app/src/main/kotlin/io/redgreen/timelapse/extendeddiff/ExtendedDiffHtml.kt
index 5949e286..4066b7d7 100644
--- a/app/src/main/kotlin/io/redgreen/timelapse/extendeddiff/ExtendedDiffHtml.kt
+++ b/app/src/main/kotlin/io/redgreen/timelapse/extendeddiff/ExtendedDiffHtml.kt
@@ -1,9 +1,12 @@
 package io.redgreen.timelapse.extendeddiff
 
+import io.redgreen.scout.ParseResult.WellFormedFunction
 import io.redgreen.timelapse.extendeddiff.ComparisonResult.Added
 import io.redgreen.timelapse.extendeddiff.ComparisonResult.Deleted
 import io.redgreen.timelapse.extendeddiff.ComparisonResult.Modified
 import io.redgreen.timelapse.extendeddiff.ExtendedDiff.HasChanges
+import io.redgreen.timelapse.extendeddiff.LineNumber.CurrentSnapshot
+import io.redgreen.timelapse.extendeddiff.LineNumber.PreviousSnapshot
 
 private const val NEWLINE_CHAR = "\n"
 private const val EMPTY_STRING = ""
@@ -18,14 +21,160 @@ private const val CSS_CLASS_DELETED = "deleted"
 
 private const val HTML_NBSP = "&nbsp;"
 
+private const val APPLESAUCE = 5
+
+private sealed class LineNumber {
+  abstract val value: Int
+
+  data class CurrentSnapshot(override val value: Int) : LineNumber()
+  data class PreviousSnapshot(override val value: Int) : LineNumber()
+}
+
 fun ExtendedDiff.toHtml(): String {
   val comparisonResults = (this as HasChanges).comparisonResults
+  if (comparisonResults.size == APPLESAUCE) {
+    val sourceCodeLines = toLines(sourceCode)
+    val linesNumbersAndLines = mutableLineNumbersAndLines(comparisonResults, sourceCodeLines)
+
+    mergeUnchangedLines(sourceCodeLines, comparisonResults, linesNumbersAndLines)
+
+    val addedFunctionRanges = addedFunctionRanges(comparisonResults)
+    val modifiedFunctionRanges = modifiedFunctionRanges(comparisonResults)
+
+    val htmlRows = linesNumbersAndLines.map { (lineNumber, line) ->
+      when {
+        isDeleted(lineNumber) -> deletedRowHtml(line)
+        isInRangeOf(addedFunctionRanges, lineNumber) -> addedRowHtml(lineNumber.value, line)
+        isInRangeOf(modifiedFunctionRanges, lineNumber) -> modifiedRowHtml(lineNumber.value, line)
+        else -> unchangedRowHtml(lineNumber.value, line)
+      }
+    }
+
+    return htmlTemplate(htmlRows)
+  }
+
   val currentSnapshotRows = toTableRows(sourceCode, comparisonResults)
   val deletedResults = comparisonResults.filterIsInstance<Deleted>()
 
   return htmlTemplate(mergeDeletedContentWithCurrentSnapshot(currentSnapshotRows, deletedResults))
 }
 
+private fun mergeUnchangedLines(
+  sourceCodeLines: List<String>,
+  comparisonResults: List<ComparisonResult>,
+  linesNumbersAndLines: MutableList<Pair<LineNumber, String>>
+) {
+  val unchangedLineNumbers = unchangedLineNumbers(sourceCodeLines, linesNumbersAndLines)
+
+  val deletedFunctionStartLinesAndLengths = comparisonResults
+    .filterIsInstance<Deleted>()
+    .map { it.function.startLine to it.function.endLine - it.function.startLine }
+
+  unchangedLineNumbers.onEach { unchangedLineNumber ->
+    val collidingLineNumberAndLength = deletedFunctionStartLinesAndLengths.find {
+      it.first == unchangedLineNumber.value
+    }
+    val foundCollision = collidingLineNumberAndLength != null
+
+    if (foundCollision) {
+      val collidingLineNumberAndLine = linesNumbersAndLines
+        .find { it.first is PreviousSnapshot && it.first.value == unchangedLineNumber.value }
+
+      if (collidingLineNumberAndLine != null) {
+        val collidingLineAndLineNumberIndex = linesNumbersAndLines.indexOf(collidingLineNumberAndLine)
+        val indexToInsert = collidingLineAndLineNumberIndex + collidingLineNumberAndLength!!.second
+        val lineNumberLineRow = unchangedLineNumber to sourceCodeLines[unchangedLineNumber.value - 1]
+        linesNumbersAndLines.add(indexToInsert + 1, lineNumberLineRow)
+      }
+    } else {
+      val previousLineNumber = previousLineNumber(linesNumbersAndLines, unchangedLineNumber)
+      if (previousLineNumber != null) {
+        val indexToInsert = indexToInsert(linesNumbersAndLines, previousLineNumber)
+        val lineNumberLineRow = unchangedLineNumber to sourceCodeLines[unchangedLineNumber.value - 1]
+        linesNumbersAndLines.add(indexToInsert, lineNumberLineRow)
+      }
+    }
+  }
+}
+
+private fun indexToInsert(
+  linesNumbersAndLines: MutableList<Pair<LineNumber, String>>,
+  lineNumber: LineNumber
+): Int {
+  return linesNumbersAndLines
+    .map(Pair<LineNumber, String>::first)
+    .indexOf(lineNumber) + 1
+}
+
+private fun previousLineNumber(
+  linesNumbersAndLines: MutableList<Pair<LineNumber, String>>,
+  unchangedLineNumber: CurrentSnapshot
+): LineNumber? {
+  return linesNumbersAndLines
+    .map(Pair<LineNumber, String>::first)
+    .find { it is CurrentSnapshot && it.value == unchangedLineNumber.value - 1 }
+}
+
+private fun isInRangeOf(
+  lineNumberRanges: List<IntRange>,
+  lineNumber: LineNumber
+): Boolean {
+  return lineNumberRanges.any { range -> lineNumber.value in range }
+}
+
+private fun isDeleted(lineNumber: LineNumber): Boolean =
+  lineNumber is PreviousSnapshot
+
+private fun toLines(sourceCode: String): List<String> =
+  sourceCode.split(NEWLINE_CHAR)
+
+private fun mutableLineNumbersAndLines(
+  comparisonResults: List<ComparisonResult>,
+  sourceCodeLines: List<String>
+): MutableList<Pair<LineNumber, String>> {
+  return comparisonResults
+    .map { result -> toLineNumberAndContent(result, sourceCodeLines) }
+    .flatten()
+    .toMutableList()
+}
+
+private fun unchangedLineNumbers(
+  sourceCodeLines: List<String>,
+  linesNumbersAndLines: MutableList<Pair<LineNumber, String>>
+): List<CurrentSnapshot> {
+  val allLineNumbers = (1..sourceCodeLines.size).toList()
+
+  val lineNumbersInCurrentSnapshot = linesNumbersAndLines
+    .map { it.first }
+    .filterIsInstance<CurrentSnapshot>()
+    .map { it.value }
+
+  return (allLineNumbers - lineNumbersInCurrentSnapshot)
+    .map(::CurrentSnapshot)
+}
+
+private fun toLineNumberAndContent(
+  result: ComparisonResult,
+  sourceCodeLines: List<String>
+): List<Pair<LineNumber, String>> {
+  return when (result) {
+    is Added -> {
+      lineNumbersRange(result.function).map { CurrentSnapshot(it) to sourceCodeLines[it - 1] }
+    }
+
+    is Modified -> {
+      lineNumbersRange(result.function).map { CurrentSnapshot(it) to sourceCodeLines[it - 1] }
+    }
+
+    is Deleted -> {
+      result
+        .snippet
+        .split(NEWLINE_CHAR)
+        .mapIndexed { index, line -> PreviousSnapshot(result.function.startLine + index) to line }
+    }
+  }
+}
+
 private fun htmlTemplate(tableRows: List<String>): String {
   return """
         <html lang="en-US">
@@ -71,16 +220,19 @@ private fun toTableRows(
   }
 }
 
+private fun lineNumbersRange(function: WellFormedFunction): IntRange =
+  function.startLine..function.endLine
+
 private fun addedFunctionRanges(comparisonResults: List<ComparisonResult>): List<IntRange> {
   return comparisonResults
     .filterIsInstance<Added>()
-    .map { it.function.startLine..it.function.endLine }
+    .map { lineNumbersRange(it.function) }
 }
 
 private fun modifiedFunctionRanges(comparisonResults: List<ComparisonResult>): List<IntRange> {
   return comparisonResults
     .filterIsInstance<Modified>()
-    .map { it.function.startLine..it.function.endLine }
+    .map { lineNumbersRange(it.function) }
 }
 
 private fun addedRowHtml(lineNumber: Int, line: String): String {
@@ -105,7 +257,7 @@ private fun deletedRowHtml(line: String): String {
   return """
       <tr${classAttribute(CSS_CLASS_DELETED)}>
           <td></td>
-          <td>$line</td>
+          <td>${padStartWithNbsp(line)}</td>
       </tr>
   """.trimIndent()
 }

diff --git a/app/src/main/java/org/simple/clinic/search/PatientSearchScreen.kt b/app/src/main/java/org/simple/clinic/search/PatientSearchScreen.kt
index 6b2d74e11..30f0da383 100644
--- a/app/src/main/java/org/simple/clinic/search/PatientSearchScreen.kt
+++ b/app/src/main/java/org/simple/clinic/search/PatientSearchScreen.kt
@@ -1,14 +1,19 @@
 package org.simple.clinic.search
 
 import android.content.Context
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
+import android.support.transition.ChangeBounds
+import android.support.transition.Fade
+import android.support.transition.TransitionManager
+import android.support.transition.TransitionSet
+import android.support.v4.view.animation.FastOutSlowInInterpolator
 import android.util.AttributeSet
 import android.view.View
-import android.widget.Button
+import android.view.ViewGroup
+import android.view.inputmethod.EditorInfo
 import android.widget.EditText
 import android.widget.ImageButton
 import android.widget.RelativeLayout
+import android.widget.Toast
 import com.jakewharton.rxbinding2.view.RxView
 import com.jakewharton.rxbinding2.widget.RxTextView
 import io.reactivex.Observable
@@ -17,13 +22,10 @@ import io.reactivex.schedulers.Schedulers.io
 import kotterknife.bindView
 import org.simple.clinic.R
 import org.simple.clinic.activity.TheActivity
+import org.simple.clinic.newentry.DateOfBirthAndAgeVisibility
 import org.simple.clinic.newentry.PatientEntryScreen
-import org.simple.clinic.patient.PatientSearchResult
 import org.simple.clinic.router.screen.ScreenRouter
-import org.simple.clinic.summary.PatientSummaryCaller.SEARCH
-import org.simple.clinic.summary.PatientSummaryScreen
 import org.simple.clinic.widgets.showKeyboard
-import java.util.UUID
 import javax.inject.Inject
 
 class PatientSearchScreen(context: Context, attrs: AttributeSet) : RelativeLayout(context, attrs) {
@@ -43,10 +45,12 @@ class PatientSearchScreen(context: Context, attrs: AttributeSet) : RelativeLayou
 
   private val backButton by bindView<ImageButton>(R.id.patientsearch_back)
   private val fullNameEditText by bindView<EditText>(R.id.patientsearch_fullname)
-  private val newPatientButton by bindView<Button>(R.id.patientsearch_new_patient)
+  private val dateOfBirthEditText by bindView<EditText>(R.id.patientsearch_dateofbirth)
+  private val dateOfBirthEditTextContainer by bindView<ViewGroup>(R.id.patientsearch_dateofbirth_container)
+  private val dateOfBirthAndAgeSeparator by bindView<View>(R.id.patientsearch_dateofbirth_and_age_separator)
+  private val ageEditText by bindView<EditText>(R.id.patientsearch_age)
+  private val ageEditTextContainer by bindView<ViewGroup>(R.id.patientsearch_age_container)
   private val searchButton by bindView<View>(R.id.patientsearch_search)
-  private val patientRecyclerView by bindView<RecyclerView>(R.id.patientsearch_recyclerview)
-  private val resultsAdapter = PatientSearchResultsAdapter()
 
   override fun onFinishInflate() {
     super.onFinishInflate()
@@ -55,29 +59,14 @@ class PatientSearchScreen(context: Context, attrs: AttributeSet) : RelativeLayou
     }
     TheActivity.component.inject(this)
 
-    // TODO: this will be replaced by ACTION_NEXT once DOB and Age fields are also added.
-    fullNameEditText.setOnEditorActionListener { _, _, _ ->
-      // Swallow IME key presses because a search is triggered on every text change automatically.
-      // Without this, the keyboard gets dismissed
-      true
-    }
-
     fullNameEditText.showKeyboard()
 
-    patientRecyclerView.adapter = resultsAdapter
-    patientRecyclerView.layoutManager = LinearLayoutManager(context)
-
     backButton.setOnClickListener {
       screenRouter.pop()
     }
 
     Observable
-        .mergeArray(
-            searchQueryChanges(),
-            ageFilterTextChanges(),
-            searchClicks(),
-            newPatientButtonClicks(),
-            searchResultClicks())
+        .mergeArray(nameChanges(), dateOfBirthChanges(), ageChanges(), searchClicks())
         .observeOn(io())
         .compose(controller)
         .observeOn(mainThread())
@@ -85,50 +74,73 @@ class PatientSearchScreen(context: Context, attrs: AttributeSet) : RelativeLayou
         .subscribe { uiChange -> uiChange(this) }
   }
 
-  private fun searchQueryChanges() =
+  private fun nameChanges() =
       RxTextView
           .textChanges(fullNameEditText)
           .map(CharSequence::toString)
           .map(::SearchQueryNameChanged)
 
-  private fun ageFilterTextChanges() = Observable.just(SearchQueryAgeChanged(""))
-  private fun newPatientButtonClicks() =
-      RxView
-          .clicks(newPatientButton)
-          .map { CreateNewPatientClicked() }
-
-  private fun searchClicks() =
-      RxView
-          .clicks(searchButton)
-          .map { SearchClicked() }
-
-  private fun searchResultClicks() = resultsAdapter.itemClicks
-
-  fun showCreatePatientButton(shouldBeShown: Boolean) {
-    if (shouldBeShown) {
-      newPatientButton.visibility = View.VISIBLE
-    } else {
-      newPatientButton.visibility = View.GONE
-    }
+  private fun dateOfBirthChanges() =
+      RxTextView
+          .textChanges(dateOfBirthEditText)
+          .map(CharSequence::toString)
+          .map(::SearchQueryDateOfBirthChanged)
+
+  private fun ageChanges() = RxTextView
+      .textChanges(ageEditText)
+      .map(CharSequence::toString)
+      .map(::SearchQueryAgeChanged)
+
+  private fun searchClicks(): Observable<SearchClicked> {
+    val imeSearchClicks = RxTextView
+        .editorActionEvents(dateOfBirthEditText)
+        .mergeWith(RxTextView.editorActionEvents(ageEditText))
+        .filter { it.actionId() == EditorInfo.IME_ACTION_SEARCH }
+
+    return RxView
+        .clicks(searchButton)
+        .mergeWith(imeSearchClicks)
+        .map { SearchClicked() }
   }
 
-  fun updatePatientSearchResults(patients: List<PatientSearchResult>) {
-    resultsAdapter.updateAndNotifyChanges(patients)
+  fun showSearchButtonAsDisabled() {
+    searchButton.setBackgroundResource(R.color.patientsearch_search_disabled)
   }
 
-  fun openPatientSummaryScreen(patientUuid: UUID) {
-    screenRouter.push(PatientSummaryScreen.KEY(patientUuid, SEARCH))
+  fun showSearchButtonAsEnabled() {
+    searchButton.setBackgroundResource(R.color.patientsearch_search_enabled)
   }
 
-  fun openPersonalDetailsEntryScreen() {
+  fun openPatientEntryScreen() {
     screenRouter.push(PatientEntryScreen.KEY)
   }
 
-  fun showSearchButtonAsDisabled() {
-    searchButton.setBackgroundResource(R.color.patientsearch_search_disabled)
+  fun openPatientSearchResultsScreen() {
+    Toast.makeText(context, "Work in progress", Toast.LENGTH_SHORT).show()
   }
 
-  fun showSearchButtonAsEnabled() {
-    searchButton.setBackgroundResource(R.color.patientsearch_search_enabled)
+  fun setDateOfBirthAndAgeVisibility(visibility: DateOfBirthAndAgeVisibility) {
+    val transition = TransitionSet()
+        .addTransition(ChangeBounds())
+        .addTransition(Fade())
+        .setOrdering(TransitionSet.ORDERING_TOGETHER)
+        .setDuration(250)
+        .setInterpolator(FastOutSlowInInterpolator())
+    TransitionManager.beginDelayedTransition(this, transition)
+
+    dateOfBirthEditTextContainer.visibility = when (visibility) {
+      DateOfBirthAndAgeVisibility.DATE_OF_BIRTH_VISIBLE, DateOfBirthAndAgeVisibility.BOTH_VISIBLE -> View.VISIBLE
+      else -> View.GONE
+    }
+
+    dateOfBirthAndAgeSeparator.visibility = when (visibility) {
+      DateOfBirthAndAgeVisibility.BOTH_VISIBLE -> View.VISIBLE
+      else -> View.GONE
+    }
+
+    ageEditTextContainer.visibility = when (visibility) {
+      DateOfBirthAndAgeVisibility.AGE_VISIBLE, DateOfBirthAndAgeVisibility.BOTH_VISIBLE -> View.VISIBLE
+      else -> View.GONE
+    }
   }
 }
